/*
 * This source file was generated by the Gradle 'init' task
 */
package storeproject;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.YearMonth;
import java.time.temporal.ChronoUnit;
import java.io.*;
import java.util.*;
import storeproject.exceptions.ExpiredItemException;          
import storeproject.exceptions.InsufficientPaymentException;
import storeproject.exceptions.InsufficientStockException;  

// string templates
class StringTemplates {
  String receiptID(int serialNumber) {
      return "Nomer na kasova belejka: " + serialNumber;
  }
  String cashierName(String name) {
      return "Kasier: " + name;
  }
  String issuedAt(LocalDateTime dateTime) {
      return "Izdadena na: " + dateTime;
  }
  String items(List<ReceiptItem> items) {
    StringBuilder sb = new StringBuilder();
    for (int i = 0; i < items.size(); i++) {
        ReceiptItem item = items.get(i);
        sb.append(item.getItem().getName())
          .append(" x ")
          .append(item.getQuantity())
          .append(" @ $")
          .append(String.format("%.2f", item.getPrice()))
          .append(" = $")
          .append(String.format("%.2f", item.getPrice() * item.getQuantity()));
          if (i < items.size() - 1) { 
            sb.append("\n"); 
        }
    };
    return sb.toString();
    }
    String newline() {
        return "-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-";
    }
    String genericAmount(String priceLabel,double price) {
        return priceLabel + ": $"  + String.format("%.2f",price);
    }
    String totalAmount(double price){
        return genericAmount("Obshto", price);
    }
    String paidAmount(double price){
        return genericAmount("Plateno", price);
    }
    String remainderAmount(double price){
        return genericAmount("Resto", price);
    }
}

abstract class Item implements Serializable {
    private int id;
    private String name;
    private double unitRawPrice;
    private LocalDate expirationDate;
    private int quantity;

    public Item(int id, String name, double unitRawPrice, LocalDate expirationDate, int quantity) {
        this.id = id;
        this.name = name;
        this.unitRawPrice = unitRawPrice;
        this.expirationDate = expirationDate;
        this.quantity = quantity;
    }

    public int getId() { return id; }
    public String getName() { return name; }
    public double getUnitRawPrice() { return unitRawPrice; }
    public LocalDate getExpirationDate() { return expirationDate; }
    public int getQuantity() { return quantity; }
    public void setQuantity(int quantity) { this.quantity = quantity; }

    public abstract double calculateSellingPrice(Store store);
}

class FoodItem extends Item {
    public FoodItem(int id, String name, double unitDeliveryPrice, LocalDate expirationDate, int quantity) {
        super(id, name, unitDeliveryPrice, expirationDate, quantity);
    }

    @Override
    public double calculateSellingPrice(Store store) {
        double markupPercentage = store.getFoodMarkupPercentage();
        double sellingPrice = getUnitRawPrice() * (1 + markupPercentage);

        long daysUntilExpiration = ChronoUnit.DAYS.between(LocalDate.now(), getExpirationDate());
        if (daysUntilExpiration < store.getDaysUntilExpirationForDiscount()) {
            sellingPrice = sellingPrice * (1 - store.getExpirationDiscountPercentage());
        }

        return sellingPrice;
    }
}

class NonFoodItem extends Item {
    public NonFoodItem(int id, String name, double unitDeliveryPrice, LocalDate expirationDate, int quantity) {
        super(id, name, unitDeliveryPrice, expirationDate, quantity);
    }

    @Override
    public double calculateSellingPrice(Store store) {
        double markupPercentage = store.getNonFoodMarkupPercentage();
        double sellingPrice = getUnitRawPrice() * (1 + markupPercentage);

        long daysUntilExpiration = ChronoUnit.DAYS.between(LocalDate.now(), getExpirationDate());
        if (daysUntilExpiration < store.getDaysUntilExpirationForDiscount()) {
            sellingPrice = sellingPrice * (1 - store.getExpirationDiscountPercentage());
        }

        return sellingPrice;
    }
}

class Cashier implements Serializable {
    private int id;
    private String name;
    private double monthlySalary;

    public Cashier(int id, String name, double monthlySalary) {
        this.id = id;
        this.name = name;
        this.monthlySalary = monthlySalary;
    }

    public int getId() { return id; }
    public String getName() { return name; }
    public double getMonthlySalary() { return monthlySalary; }
}

class CashRegister implements Serializable {
    private int id;
    private Cashier cashier;

    public CashRegister(int id) {
        this.id = id;
        this.cashier = null;
    }

    public int getId() { return id; }
    public Cashier getCashier() { return cashier; }

    public void assignCashier(Cashier cashier) {
        this.cashier = cashier;
    }

    public void removeCashier() {
        this.cashier = null;
    }
}

class Receipt implements Serializable {
    private int serialNumber;
    private Cashier cashier;
    private LocalDateTime dateTime;
    private List<ReceiptItem> items;
    private double totalValue;
    private double moneyProvided;

    public Receipt(int serialNumber, Cashier cashier, LocalDateTime dateTime, double moneyProvided) {
        this.serialNumber = serialNumber;
        this.cashier = cashier;
        this.dateTime = dateTime;
        this.items = new ArrayList<>();
        this.totalValue = 0.0;
        this.moneyProvided = moneyProvided;
    }

    public int getSerialNumber() { return serialNumber; }
    public Cashier getCashier() { return cashier; }
    public LocalDateTime getDateTime() { return dateTime; }
    public List<ReceiptItem> getItems() { return items; }
    public double getTotalValue() { return totalValue; }
    public double getMoneyProvided() { return moneyProvided; }

    public void addItem(ReceiptItem item) {
        this.items.add(item);
        this.totalValue += item.getPrice() * item.getQuantity();
    }
 
    public void printReceipt() {
      StringTemplates templates = new StringTemplates();
      System.out.println(templates.receiptID(serialNumber));
      System.out.println(templates.cashierName(cashier.getName()));
      System.out.println(templates.issuedAt(dateTime));
      System.out.println(templates.newline());
      System.out.println(templates.items(items));
      System.out.println(templates.newline());
      System.out.println(templates.totalAmount(totalValue));
      System.out.println(templates.paidAmount(moneyProvided));
      System.out.println(templates.remainderAmount(moneyProvided - totalValue));
    }


    public void serializeToFile(String filename) throws IOException {
        try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(filename))) {
            oos.writeObject(this);
        }
    }

    public static Receipt deserializeFromFile(String filename) throws IOException, ClassNotFoundException {
        try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream(filename))) {
            return (Receipt) ois.readObject();
        }
    }

    public String toFileString() {
      StringBuilder sb = new StringBuilder();
      
      StringTemplates templates = new StringTemplates();
      sb.append(templates.receiptID(serialNumber)).append("\n");
      sb.append(templates.cashierName(cashier.getName())).append("\n");
      sb.append(templates.issuedAt(dateTime)).append("\n");
      sb.append(templates.newline()).append("\n");
      sb.append(templates.items(items)).append("\n");
      sb.append(templates.newline()).append("\n");
      sb.append(templates.totalAmount(totalValue)).append("\n");
      sb.append(templates.paidAmount(moneyProvided)).append("\n");
      sb.append(templates.remainderAmount(moneyProvided - totalValue)).append("\n");
      return sb.toString();
    }
}

class ReceiptItem implements Serializable {
    private Item item;
    private int quantity;
    private double price;

    public ReceiptItem(Item item, int quantity, double price) {
        this.item = item;
        this.quantity = quantity;
        this.price = price;
    }

    public Item getItem() { return item; }
    public int getQuantity() { return quantity; }
    public double getPrice() { return price; }
}

class Bag {
    private Map<Integer, Integer> items = new HashMap<>();
    private double amountPaid;

    public Bag() {}

    public void addItem(int productId, int quantity) {
        items.put(productId, quantity);
    }

    public void setAmountPaid(double amount) {
        this.amountPaid = amount;
    }

    public double getAmountPaid() {
        return amountPaid;
    }

    public Map<Integer, Integer> getItems() {
        return items;
    }

}

public class Store {
    private double foodMarkupPercentage;
    private double nonFoodMarkupPercentage;
    private int daysUntilExpirationForDiscount;
    private double expirationDiscountPercentage;
    private List<Item> items;
    private List<Cashier> cashiers;
    private List<CashRegister> cashRegisters;
    private List<Receipt> receipts;
    private int receiptCounter;

    public Store(double foodMarkupPercentage, double nonFoodMarkupPercentage, int daysUntilExpirationForDiscount, double expirationDiscountPercentage) {
        this.foodMarkupPercentage = foodMarkupPercentage;
        this.nonFoodMarkupPercentage = nonFoodMarkupPercentage;
        this.daysUntilExpirationForDiscount = daysUntilExpirationForDiscount;
        this.expirationDiscountPercentage = expirationDiscountPercentage;
        this.items = new ArrayList<>();
        this.cashiers = new ArrayList<>();
        this.cashRegisters = new ArrayList<>();
        this.receipts = new ArrayList<>();
        this.receiptCounter = 0;
    }

    public double getFoodMarkupPercentage() { return foodMarkupPercentage; }
    public double getNonFoodMarkupPercentage() { return nonFoodMarkupPercentage; }
    public int getDaysUntilExpirationForDiscount() { return daysUntilExpirationForDiscount; }
    public double getExpirationDiscountPercentage() { return expirationDiscountPercentage; }


    public void addItem(Item item) {
        this.items.add(item);
    }

    public void removeItem(int itemId) {
        this.items.removeIf(item -> item.getId() == itemId);
    }

    public Cashier getCashier(int cashierId) {
        return cashiers.stream().filter(cashier -> cashier.getId() == cashierId).findFirst().orElse(null);
    }

    public void addCashier(Cashier cashier) {
        this.cashiers.add(cashier);
    }

    public void removeCashier(int cashierId) {
        this.cashiers.removeIf(cashier -> cashier.getId() == cashierId);
    }

    public void addCashRegister(CashRegister cashRegister) {
        this.cashRegisters.add(cashRegister);
    }

    public void assignCashierToRegister(int cashierId, int registerId) {
        Cashier cashier = getCashier(cashierId);
        CashRegister register = cashRegisters.stream().filter(reg -> reg.getId() == registerId).findFirst().orElse(null);

        if (cashier == null) {
            throw new IllegalArgumentException("Kasier " + cashierId + " ne sushtestvuva.");
        }
        if (register == null) {
            throw new IllegalArgumentException("Kasa " + registerId + " ne sushtestvuva.");
        }

        register.assignCashier(cashier);
    }

    public void removeCashierFromRegister(int registerId) {
        CashRegister register = cashRegisters.stream().filter(reg -> reg.getId() == registerId).findFirst().orElse(null);
        if (register == null) {
            throw new IllegalArgumentException("Kasa " + registerId + " ne sushtestvuva.");
        }
        register.removeCashier();
    }

   public Receipt sellItems(int registerId, Map<Integer, Integer> itemQuantities, double customerPayment) throws InsufficientStockException, IOException, ExpiredItemException, InsufficientPaymentException {
        CashRegister register = cashRegisters.stream().filter(reg -> reg.getId() == registerId).findFirst().orElse(null);

        if (register == null) {
            throw new IllegalArgumentException("Kasa " + registerId + " ne sushtestvuva.");
        }

        Cashier cashier = register.getCashier();
        if (cashier == null) {
            throw new IllegalStateException("Nqma kasier na kasa " + registerId);
        }

        for (Map.Entry<Integer, Integer> entry : itemQuantities.entrySet()) {
            int itemId = entry.getKey();
            int requestedQuantity = entry.getValue();

            Item item = items.stream().filter(i -> i.getId() == itemId).findFirst().orElse(null);

            if (item == null) {
                throw new IllegalArgumentException("Produkt " + itemId + " ne e otkrit.");
            }

            if (item.getQuantity() < requestedQuantity) {
                throw new InsufficientStockException(itemId, requestedQuantity, item.getQuantity());
            }

            if (item.getExpirationDate().isBefore(LocalDate.now())) {
              throw new ExpiredItemException(itemId, item.getExpirationDate());
            }
        }


        receiptCounter++;
        Receipt receipt = new Receipt(receiptCounter, cashier, LocalDateTime.now(),customerPayment);

        for (Map.Entry<Integer, Integer> entry : itemQuantities.entrySet()) {
            int itemId = entry.getKey();
            int quantityPurchased = entry.getValue();

            Item item = items.stream().filter(i -> i.getId() == itemId).findFirst().orElse(null);
            double sellingPrice = item.calculateSellingPrice(this);

            ReceiptItem receiptItem = new ReceiptItem(item, quantityPurchased, sellingPrice);
            receipt.addItem(receiptItem);

            item.setQuantity(item.getQuantity() - quantityPurchased);
        }

        if (customerPayment < receipt.getTotalValue()) {
            throw new InsufficientPaymentException(receipt.getTotalValue(), customerPayment);
        }

        receipts.add(receipt);

        String filename = "receipts/receipt_" + receiptCounter + ".txt";
       try (PrintWriter writer = new PrintWriter(new FileWriter(filename))) {
         writer.print(receipt.toFileString());
       }

        String serializedFileName = "receipts/receipt_" + receiptCounter + ".ser";
       receipt.serializeToFile(serializedFileName);

        return receipt;
    }

    public int getTotalReceiptsIssued() {
        return receiptCounter;
    }

    public double getTotalRevenue() {
        return receipts.stream().mapToDouble(Receipt::getTotalValue).sum();
    }

    public double calculateCashierSalariesCost() {
        return cashiers.stream().mapToDouble(Cashier::getMonthlySalary).sum();
    }

    public double calculateDeliveryCosts() {
        return items.stream().mapToDouble(Item::getUnitRawPrice).sum();
    }

    public double calculateProfit() {
        return getTotalRevenue() - calculateCashierSalariesCost() - calculateDeliveryCosts();
    }
    

  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    
    System.out.println("-=-=-=-=-=-= Magazin =-=-=-=-=-=-");
    System.out.println("Vuvedete nadcenkata na hranitelni produkti (ex. 0.2):");
    double foodMarkup = Double.parseDouble(scanner.nextLine());
    System.out.println("Vuvedete nadcenkata na ne-hranitelni produkti (ex. 0.1):");
    double nonFoodMarkup = Double.parseDouble(scanner.nextLine());
    System.out.println("Vuvedete dnite, ot koito zavisi nachaloto na promociqta predi iztichane na srok na godnost (ex. 7):");
    int expiryDiscountDays = Integer.parseInt(scanner.nextLine());
    System.out.println("Vuvedete promociqta, koqto shte bude nachislena na produkt, koito nablijava kraqt na srok na godnost (ex. 0.1):");
    double expiryDiscount = Double.parseDouble(scanner.nextLine());
    Store store = new Store(foodMarkup,nonFoodMarkup, expiryDiscountDays, expiryDiscount);

    System.out.println("-=-=-=-=-=-= Dobavqne na produkti =-=-=-=-=-=-");
    int i = 1;
    while(true) {
        System.out.println("Vuvedete imeto na produkt (ex. banan):");
        String name = scanner.nextLine();
        System.out.println("Vuvedete cenata na edin broi ot produktite (ex. 0.5):");
        double deliveryPrice = Double.parseDouble(scanner.nextLine());
        System.out.println("Vuvedete sled kolko dni produktut shte ima iztekul srok na godnost (ex. 365):");
        int expiry = Integer.parseInt(scanner.nextLine());
        System.out.println("Vuvedete kolichestvoto produkt (ex. 50):");
        int quantity = Integer.parseInt(scanner.nextLine());
        
        store.addItem(new FoodItem(i, name, deliveryPrice, LocalDate.now().plusDays(expiry), quantity));
        
        System.out.println("Iskate li da dobavite oshte produkti? (da/ne)");
        String maybeContinue = scanner.nextLine();
        if(maybeContinue.equals("ne")) {
            break;
        } else continue;
    }
    
    System.out.println("-=-=-=-=-=-= Dobavqne na kasi =-=-=-=-=-=-");
    System.out.println("Kolko kasi iskate da dobavite? (ex. 5)");
    int registers = Integer.parseInt(scanner.nextLine());
    for(int j = 1; j <= registers; j++){
        store.addCashRegister(new CashRegister(j));
    }
    
    System.out.println("-=-=-=-=-=-= Dobavqne na kasieri =-=-=-=-=-=-");
    for (int k = 1; k <= registers; k++) {
        System.out.println("Vuvedete imeto na kasiera na kasa " + k + " (ex. Petur)");
        String cashierName = scanner.nextLine();
        System.out.println("Vuvedete zaplatata na " + cashierName + " (ex. 1750)");
        int cashierSalary = Integer.parseInt(scanner.nextLine());
        store.addCashier(new Cashier(k, cashierName, cashierSalary));
        store.assignCashierToRegister(k, k);
    }


    System.out.println("-=-=-=-=-=-= Obrabotvane na pokupki =-=-=-=-=-=-");
    List<Bag> koshnici = new ArrayList<>();
    while(true) {
        Bag koshnica = new Bag();
        System.out.println("Vuvedete id-to na produkta (ex. 1):");
        int product = Integer.parseInt(scanner.nextLine());
        System.out.println("Vuvedete kolichestvoto ot produkt " + product + " koeto shte bude zakupeno (ex. 50):");
        int quantity = Integer.parseInt(scanner.nextLine());
        System.out.println("Vuvedete sumata, koqto kupuvacha dava (ex. 16.50):");
        double amount = Double.parseDouble(scanner.nextLine());
        koshnica.addItem(product, quantity);
        koshnica.setAmountPaid(amount);
        koshnici.add(koshnica);
        
        System.out.println("Iskate li da obrabotvate oshte pokupki? (da/ne)");
        String maybeContinue = scanner.nextLine();
        if(maybeContinue.equals("ne")) break;
    }

    try {
        for (int h = 0; h < koshnici.size(); h++) {
            Bag koshnica = koshnici.get(h);
            Receipt receipt = store.sellItems(1, koshnica.getItems(), koshnica.getAmountPaid());
            receipt.printReceipt();
        }
        System.out.println("\n-=-=-=-=--=-=-= Statistika ot raboten den: =-=-=-=--=-=-=-");
        System.out.println("Broi kasovi belejki: " + store.getTotalReceiptsIssued());
        System.out.println("Prihodi ot prodadeni stoki: $" + store.getTotalRevenue());
        System.out.println("Obshta mesechna zaplata na kasieri: $" + store.calculateCashierSalariesCost());
        System.out.println("Zaplata na kasieri za denqt: $" + store.calculateCashierSalariesCost() / YearMonth.now().lengthOfMonth());
        System.out.println("Razhodi dostavki: $" + store.calculateDeliveryCosts());
        System.out.println("Pechalba: $" + store.calculateProfit());               

        String serializedFileName = "receipts/receipt_" + store.getTotalReceiptsIssued() + ".ser";
        Receipt deserializedReceipt = Receipt.deserializeFromFile(serializedFileName);
        System.out.println("\n-=-=-=-=--=-=-= Deserialized: =-=-=-=--=-=-=-");
        deserializedReceipt.printReceipt();      

    } catch (Exception e) {
        System.err.println("Error: " + e.getMessage());
    }
    
    
    scanner.close();
}
}