/*
 * This source file was generated by the Gradle 'init' task
 */
package storeproject;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import storeproject.exceptions.CashierNotFoundException;
import storeproject.exceptions.CashRegisterNotFoundException;
import storeproject.exceptions.ExpiredItemException;
import storeproject.exceptions.InsufficientPaymentException;
import storeproject.exceptions.InsufficientStockException;
import storeproject.exceptions.NoCashierAssignedException;
import storeproject.service.ReceiptService;

public class Store {
    private double foodMarkupPercentage;
    private double nonFoodMarkupPercentage;
    private int daysUntilExpirationForDiscount;
    private double expirationDiscountPercentage;
    private List<Item> items;
    private List<Cashier> cashiers;
    private List<CashRegister> cashRegisters;
    private List<Receipt> receipts;
    private int receiptCounter;
    private ReceiptService receiptService;

    public Store(double foodMarkupPercentage, double nonFoodMarkupPercentage, int daysUntilExpirationForDiscount,
            double expirationDiscountPercentage, ReceiptService receiptService) {
        this.foodMarkupPercentage = foodMarkupPercentage;
        this.nonFoodMarkupPercentage = nonFoodMarkupPercentage;
        this.daysUntilExpirationForDiscount = daysUntilExpirationForDiscount;
        this.expirationDiscountPercentage = expirationDiscountPercentage;
        this.items = new ArrayList<>();
        this.cashiers = new ArrayList<>();
        this.cashRegisters = new ArrayList<>();
        this.receipts = new ArrayList<>();
        this.receiptCounter = 0;
        this.receiptService = receiptService;
    }

    public double getFoodMarkupPercentage() {
        return foodMarkupPercentage;
    }

    public double getNonFoodMarkupPercentage() {
        return nonFoodMarkupPercentage;
    }

    public int getDaysUntilExpirationForDiscount() {
        return daysUntilExpirationForDiscount;
    }

    public double getExpirationDiscountPercentage() {
        return expirationDiscountPercentage;
    }

    public void addItem(Item item) {
        this.items.add(item);
    }

    public void removeItem(int itemId) {
        this.items.removeIf(item -> item.getId() == itemId);
    }

    public Cashier getCashier(int cashierId) {
        return this.cashiers.stream().filter(c -> c.getId() == cashierId).findFirst().orElse(null);
    }

    public void addCashier(Cashier cashier) {
        this.cashiers.add(cashier);
    }

    public void removeCashier(int cashierId) {
        this.cashiers.removeIf(c -> c.getId() == cashierId);
    }

    public void addCashRegister(CashRegister cashRegister) {
        this.cashRegisters.add(cashRegister);
    }

    public void assignCashierToRegister(int cashierId, int registerId)
            throws CashierNotFoundException, CashRegisterNotFoundException {
        Cashier cashier = this.cashiers.stream().filter(c -> c.getId() == cashierId).findFirst().orElse(null);
        CashRegister register = this.cashRegisters.stream().filter(r -> r.getId() == registerId).findFirst()
                .orElse(null);

        if (cashier == null) {
            throw new CashierNotFoundException(cashierId);
        }
        if (register == null) {
            throw new CashRegisterNotFoundException(registerId);
        }

        register.assignCashier(cashier);
    }

    public void removeCashierFromRegister(int registerId) throws CashRegisterNotFoundException {
        CashRegister register = this.cashRegisters.stream().filter(r -> r.getId() == registerId).findFirst()
                .orElse(null);
        if (register != null) {
            register.removeCashier();
        } else {
            throw new CashRegisterNotFoundException(registerId);
        }
    }

    public Receipt sellItems(int registerId, Map<Integer, Integer> itemQuantities, double customerPayment)
            throws InsufficientStockException, ExpiredItemException, InsufficientPaymentException,
            CashRegisterNotFoundException, NoCashierAssignedException, IOException {
        CashRegister register = this.cashRegisters.stream().filter(r -> r.getId() == registerId).findFirst()
                .orElse(null);
        if (register == null) {
            throw new CashRegisterNotFoundException(registerId);
        }
        if (register.getCashier() == null) {
            throw new NoCashierAssignedException(registerId);
        }

        Cashier currentCashier = register.getCashier();
        Receipt receipt = new Receipt(++receiptCounter, currentCashier, LocalDateTime.now(), customerPayment);
        double totalCost = 0;

        for (Map.Entry<Integer, Integer> entry : itemQuantities.entrySet()) {
            int itemId = entry.getKey();
            int quantitySold = entry.getValue();
            Item item = this.items.stream().filter(i -> i.getId() == itemId).findFirst().orElse(null);

            if (item == null) {
                throw new InsufficientStockException(itemId, quantitySold, 0);
            }
            if (item.getQuantity() < quantitySold) {
                throw new InsufficientStockException(itemId, quantitySold, item.getQuantity());
            }
            if (item.getExpirationDate().isBefore(LocalDate.now())) {
                throw new ExpiredItemException(itemId, item.getExpirationDate());
            }

            double sellingPrice = item.calculateSellingPrice(this);
            receipt.addItem(new ReceiptItem(item, quantitySold, sellingPrice));
            totalCost += sellingPrice * quantitySold;
        }

        if (customerPayment < totalCost) {
            throw new InsufficientPaymentException(totalCost, customerPayment);
        }

        for (Map.Entry<Integer, Integer> entry : itemQuantities.entrySet()) {
            int itemId = entry.getKey();
            int quantitySold = entry.getValue();
            Item item = this.items.stream().filter(i -> i.getId() == itemId).findFirst().get();
            item.setQuantity(item.getQuantity() - quantitySold);
        }

        this.receipts.add(receipt);
        this.receiptService.saveReceipt(receipt);

        receipt.printReceipt();

        return receipt;
    }

    public int getTotalReceiptsIssued() {
        return receipts.size();
    }

    public double getTotalRevenue() {
        return receipts.stream().mapToDouble(Receipt::getTotalValue).sum();
    }

    public double calculateCashierSalariesCost() {
        return cashiers.stream().mapToDouble(Cashier::getMonthlySalary).sum();
    }

    public double calculateDeliveryCosts() {
        return items.stream().mapToDouble(item -> item.getUnitRawPrice() * item.getQuantity()).sum() * 0.05;
    }

    public double calculateProfit() {
        double totalRevenue = getTotalRevenue();
        double salariesCost = calculateCashierSalariesCost();
        double deliveryCosts = calculateDeliveryCosts();
        return totalRevenue - salariesCost - deliveryCosts;
    }
}